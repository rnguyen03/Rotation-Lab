# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_molecule')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_molecule')
    _molecule = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_molecule', [dirname(__file__)])
        except ImportError:
            import _molecule
            return _molecule
        try:
            _mod = imp.load_module('_molecule', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _molecule = swig_import_helper()
    del swig_import_helper
else:
    import _molecule
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

M_PI = _molecule.M_PI
class atom(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, atom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, atom, name)
    __repr__ = _swig_repr
    __swig_setmethods__["element"] = _molecule.atom_element_set
    __swig_getmethods__["element"] = _molecule.atom_element_get
    if _newclass:
        element = _swig_property(_molecule.atom_element_get, _molecule.atom_element_set)
    __swig_setmethods__["x"] = _molecule.atom_x_set
    __swig_getmethods__["x"] = _molecule.atom_x_get
    if _newclass:
        x = _swig_property(_molecule.atom_x_get, _molecule.atom_x_set)
    __swig_setmethods__["y"] = _molecule.atom_y_set
    __swig_getmethods__["y"] = _molecule.atom_y_get
    if _newclass:
        y = _swig_property(_molecule.atom_y_get, _molecule.atom_y_set)
    __swig_setmethods__["z"] = _molecule.atom_z_set
    __swig_getmethods__["z"] = _molecule.atom_z_get
    if _newclass:
        z = _swig_property(_molecule.atom_z_get, _molecule.atom_z_set)

    def __init__(self, element, x, y, z):
        this = _molecule.new_atom(element, x, y, z)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molecule.delete_atom
    __del__ = lambda self: None
atom_swigregister = _molecule.atom_swigregister
atom_swigregister(atom)

class bond(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bond, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bond, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a1"] = _molecule.bond_a1_set
    __swig_getmethods__["a1"] = _molecule.bond_a1_get
    if _newclass:
        a1 = _swig_property(_molecule.bond_a1_get, _molecule.bond_a1_set)
    __swig_setmethods__["a2"] = _molecule.bond_a2_set
    __swig_getmethods__["a2"] = _molecule.bond_a2_get
    if _newclass:
        a2 = _swig_property(_molecule.bond_a2_get, _molecule.bond_a2_set)
    __swig_setmethods__["atoms"] = _molecule.bond_atoms_set
    __swig_getmethods__["atoms"] = _molecule.bond_atoms_get
    if _newclass:
        atoms = _swig_property(_molecule.bond_atoms_get, _molecule.bond_atoms_set)
    __swig_setmethods__["epairs"] = _molecule.bond_epairs_set
    __swig_getmethods__["epairs"] = _molecule.bond_epairs_get
    if _newclass:
        epairs = _swig_property(_molecule.bond_epairs_get, _molecule.bond_epairs_set)
    __swig_setmethods__["x1"] = _molecule.bond_x1_set
    __swig_getmethods__["x1"] = _molecule.bond_x1_get
    if _newclass:
        x1 = _swig_property(_molecule.bond_x1_get, _molecule.bond_x1_set)
    __swig_setmethods__["x2"] = _molecule.bond_x2_set
    __swig_getmethods__["x2"] = _molecule.bond_x2_get
    if _newclass:
        x2 = _swig_property(_molecule.bond_x2_get, _molecule.bond_x2_set)
    __swig_setmethods__["y1"] = _molecule.bond_y1_set
    __swig_getmethods__["y1"] = _molecule.bond_y1_get
    if _newclass:
        y1 = _swig_property(_molecule.bond_y1_get, _molecule.bond_y1_set)
    __swig_setmethods__["y2"] = _molecule.bond_y2_set
    __swig_getmethods__["y2"] = _molecule.bond_y2_get
    if _newclass:
        y2 = _swig_property(_molecule.bond_y2_get, _molecule.bond_y2_set)
    __swig_setmethods__["z"] = _molecule.bond_z_set
    __swig_getmethods__["z"] = _molecule.bond_z_get
    if _newclass:
        z = _swig_property(_molecule.bond_z_get, _molecule.bond_z_set)
    __swig_setmethods__["len"] = _molecule.bond_len_set
    __swig_getmethods__["len"] = _molecule.bond_len_get
    if _newclass:
        len = _swig_property(_molecule.bond_len_get, _molecule.bond_len_set)
    __swig_setmethods__["dx"] = _molecule.bond_dx_set
    __swig_getmethods__["dx"] = _molecule.bond_dx_get
    if _newclass:
        dx = _swig_property(_molecule.bond_dx_get, _molecule.bond_dx_set)
    __swig_setmethods__["dy"] = _molecule.bond_dy_set
    __swig_getmethods__["dy"] = _molecule.bond_dy_get
    if _newclass:
        dy = _swig_property(_molecule.bond_dy_get, _molecule.bond_dy_set)

    def __init__(self, bond):
        this = _molecule.new_bond(bond)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molecule.delete_bond
    __del__ = lambda self: None
bond_swigregister = _molecule.bond_swigregister
bond_swigregister(bond)

class molecule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, molecule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, molecule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["atom_max"] = _molecule.molecule_atom_max_set
    __swig_getmethods__["atom_max"] = _molecule.molecule_atom_max_get
    if _newclass:
        atom_max = _swig_property(_molecule.molecule_atom_max_get, _molecule.molecule_atom_max_set)
    __swig_setmethods__["atom_no"] = _molecule.molecule_atom_no_set
    __swig_getmethods__["atom_no"] = _molecule.molecule_atom_no_get
    if _newclass:
        atom_no = _swig_property(_molecule.molecule_atom_no_get, _molecule.molecule_atom_no_set)
    __swig_setmethods__["atoms"] = _molecule.molecule_atoms_set
    __swig_getmethods__["atoms"] = _molecule.molecule_atoms_get
    if _newclass:
        atoms = _swig_property(_molecule.molecule_atoms_get, _molecule.molecule_atoms_set)
    __swig_setmethods__["atom_ptrs"] = _molecule.molecule_atom_ptrs_set
    __swig_getmethods__["atom_ptrs"] = _molecule.molecule_atom_ptrs_get
    if _newclass:
        atom_ptrs = _swig_property(_molecule.molecule_atom_ptrs_get, _molecule.molecule_atom_ptrs_set)
    __swig_setmethods__["bond_max"] = _molecule.molecule_bond_max_set
    __swig_getmethods__["bond_max"] = _molecule.molecule_bond_max_get
    if _newclass:
        bond_max = _swig_property(_molecule.molecule_bond_max_get, _molecule.molecule_bond_max_set)
    __swig_setmethods__["bond_no"] = _molecule.molecule_bond_no_set
    __swig_getmethods__["bond_no"] = _molecule.molecule_bond_no_get
    if _newclass:
        bond_no = _swig_property(_molecule.molecule_bond_no_get, _molecule.molecule_bond_no_set)
    __swig_setmethods__["bonds"] = _molecule.molecule_bonds_set
    __swig_getmethods__["bonds"] = _molecule.molecule_bonds_get
    if _newclass:
        bonds = _swig_property(_molecule.molecule_bonds_get, _molecule.molecule_bonds_set)
    __swig_setmethods__["bond_ptrs"] = _molecule.molecule_bond_ptrs_set
    __swig_getmethods__["bond_ptrs"] = _molecule.molecule_bond_ptrs_get
    if _newclass:
        bond_ptrs = _swig_property(_molecule.molecule_bond_ptrs_get, _molecule.molecule_bond_ptrs_set)

    def __init__(self):
        this = _molecule.new_molecule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molecule.delete_molecule
    __del__ = lambda self: None

    def append_atom(self, element, x, y, z):
        return _molecule.molecule_append_atom(self, element, x, y, z)

    def append_bond(self, a1, a2, epairs):
        return _molecule.molecule_append_bond(self, a1, a2, epairs)

    def get_atom(self, i):
        return _molecule.molecule_get_atom(self, i)

    def get_bond(self, i):
        return _molecule.molecule_get_bond(self, i)

    def sort(self):
        return _molecule.molecule_sort(self)

    def xform(self, xform_matrix):
        return _molecule.molecule_xform(self, xform_matrix)
molecule_swigregister = _molecule.molecule_swigregister
molecule_swigregister(molecule)

class mx_wrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mx_wrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mx_wrapper, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xform_matrix"] = _molecule.mx_wrapper_xform_matrix_set
    __swig_getmethods__["xform_matrix"] = _molecule.mx_wrapper_xform_matrix_get
    if _newclass:
        xform_matrix = _swig_property(_molecule.mx_wrapper_xform_matrix_get, _molecule.mx_wrapper_xform_matrix_set)

    def __init__(self, xrot, yrot, zrot):
        this = _molecule.new_mx_wrapper(xrot, yrot, zrot)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molecule.delete_mx_wrapper
    __del__ = lambda self: None
mx_wrapper_swigregister = _molecule.mx_wrapper_swigregister
mx_wrapper_swigregister(mx_wrapper)


def atomset(atom, element, x, y, z):
    return _molecule.atomset(atom, element, x, y, z)
atomset = _molecule.atomset

def atomget(atom, element, x, y, z):
    return _molecule.atomget(atom, element, x, y, z)
atomget = _molecule.atomget

def bondset(bond, a1, a2, atoms, epairs):
    return _molecule.bondset(bond, a1, a2, atoms, epairs)
bondset = _molecule.bondset

def bondget(bond, a1, a2, atoms, epairs):
    return _molecule.bondget(bond, a1, a2, atoms, epairs)
bondget = _molecule.bondget

def compute_coords(bond):
    return _molecule.compute_coords(bond)
compute_coords = _molecule.compute_coords

def molmalloc(atom_max, bond_max):
    return _molecule.molmalloc(atom_max, bond_max)
molmalloc = _molecule.molmalloc

def molcopy(src):
    return _molecule.molcopy(src)
molcopy = _molecule.molcopy

def molfree(ptr):
    return _molecule.molfree(ptr)
molfree = _molecule.molfree

def molappend_atom(molecule, atom):
    return _molecule.molappend_atom(molecule, atom)
molappend_atom = _molecule.molappend_atom

def molappend_bond(molecule, bond):
    return _molecule.molappend_bond(molecule, bond)
molappend_bond = _molecule.molappend_bond

def molsort(molecule):
    return _molecule.molsort(molecule)
molsort = _molecule.molsort

def xrotation(xform_matrix, deg):
    return _molecule.xrotation(xform_matrix, deg)
xrotation = _molecule.xrotation

def yrotation(xform_matrix, deg):
    return _molecule.yrotation(xform_matrix, deg)
yrotation = _molecule.yrotation

def zrotation(xform_matrix, deg):
    return _molecule.zrotation(xform_matrix, deg)
zrotation = _molecule.zrotation

def mol_xform(molecule, matrix):
    return _molecule.mol_xform(molecule, matrix)
mol_xform = _molecule.mol_xform
class rotations(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rotations, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rotations, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _molecule.rotations_x_set
    __swig_getmethods__["x"] = _molecule.rotations_x_get
    if _newclass:
        x = _swig_property(_molecule.rotations_x_get, _molecule.rotations_x_set)
    __swig_setmethods__["y"] = _molecule.rotations_y_set
    __swig_getmethods__["y"] = _molecule.rotations_y_get
    if _newclass:
        y = _swig_property(_molecule.rotations_y_get, _molecule.rotations_y_set)
    __swig_setmethods__["z"] = _molecule.rotations_z_set
    __swig_getmethods__["z"] = _molecule.rotations_z_get
    if _newclass:
        z = _swig_property(_molecule.rotations_z_get, _molecule.rotations_z_set)

    def __init__(self):
        this = _molecule.new_rotations()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molecule.delete_rotations
    __del__ = lambda self: None
rotations_swigregister = _molecule.rotations_swigregister
rotations_swigregister(rotations)


def aQuicksort(arr, low, high):
    return _molecule.aQuicksort(arr, low, high)
aQuicksort = _molecule.aQuicksort

def aPartition(arr, low, high):
    return _molecule.aPartition(arr, low, high)
aPartition = _molecule.aPartition

def aSwap(arr, first, second):
    return _molecule.aSwap(arr, first, second)
aSwap = _molecule.aSwap

def bQuicksort(arr, low, high):
    return _molecule.bQuicksort(arr, low, high)
bQuicksort = _molecule.bQuicksort

def bPartition(arr, low, high):
    return _molecule.bPartition(arr, low, high)
bPartition = _molecule.bPartition

def bSwap(arr, first, second):
    return _molecule.bSwap(arr, first, second)
bSwap = _molecule.bSwap
# This file is compatible with both classic and new-style classes.


